@startuml

abstract class Employee {
  - ID: int
  - fullName: String
  - birthDay: String
  - phone: String
  - email: String
  - type: enum employeeType
  - Employee_type: int
  - Employee_count: static int
  - certificates: vector<shared_ptr<Certificate>>
  - manageId : static set<int> 
  - recycledIds : static set<int>
  + Employee()
  + Employee(int, String, String, String, String)
  + int getId();
  + string getFullName();
  + string getBirthDay();
  + int getPhone();
  + string getEmail();
  + bool isValidBirthDay(const string&);
  + bool isValidPhone(const string&);
  + bool isValidEmail(const string&);
  + bool isValidFullName(const string&);
  + void displayCertificates();
  + static string employeeTypeToString(employeeType type);
  + virtual void inputEmployee();
  + virtual void editEmployee();
  + virtual void detailEmployee() = 0;
  + virtual string getType() = 0;
  + virtual ~Employee();
}

class Experience {
  - level: int
  + Worker()
  + Worker(String, int, String, String, int)
  + void enterInformation() override
  + void displayInformation() override
  + string getType();
}

class Fresher {
  - major: String
  + Engineer()
  + Engineer(String, int, String, String, String)
  + void enterInformation() override
  + void displayInformation() override
  + string getType();
}

class Intern {
  - job: String
  + Staff()
  + Staff(String, int, String, String, String)
  + void enterInformation() override
  + void displayInformation() override
  + string getType();
}

class Certificate {
    - int CertificatedID
    - string CertificateName
    - string CertificateRank
    - string CertificatedDate
    + Certificate(); 
    + Certificate(int , string , string , string );
    + void addCertificate();
    + void infoCertificates();
}

class EmployeeManager {
  - employeeList: vector<shared_ptr<Employee>>
  + void addEmployee(shared_ptr<Employee> );
  + void editEmployeeById(int);
  + bool deleteEmployeeById(int );
  + void displayEmployee();
  + void displayIntern();
  + void displayExperience();
  + void displayFresher();
  + void searchEmployeeByType(string);
}

Employee <|-- Experience : Generalization 
Employee <|-- Fresher : Generalization 
Employee <|-- Intern : Generalization 
EmployeeManager o--> Employee : manages
Employee o--> Certificate : manages
@enduml
